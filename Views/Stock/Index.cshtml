@model StockViewModel
@using System
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
    <title>Stock Chart</title>
</head>
<body>
    <h1 id="page_title">Stock Chart</h1>
    <div>
        <span>
            <div>
                <label for="ticker">Select Stock Ticker:</label>
                <select id="ticker" name="ticker" onchange="getChartData()">
                    @foreach (var ticker in Model.Tickers)
                    {
                        <option value="@ticker">@ticker</option>
                    }
                </select>
            </div>
            <div>
                <label for="interval">Select Time Interval:</label>
                <select id="interval" name="interval" onchange="getChartData()">
                    @foreach (var interval in Model.Intervals)
                    {
                        <option value="@interval">@interval</option>
                    }
                </select>
            </div>
            <div>
                <button type="button" class="btn btn-primary" id="openIndicatorPopup">Add Indicator</button>
            </div>

            <div id="indicatorPopup" class="modal fade" tabindex="-1" role="dialog">
                @await Html.PartialAsync("IndicatorPopup")
            </div>
        </span>
    </div>
    <div id="dashboard_div" style="width: 100%; height: 800px;">
        <div id="candlestick_chart_div" style="width: 100%; height: 600px;"></div>
        <div id="volume_chart_div" style="width: 100%; height: 100px;"></div>
        <div id="filter_slider_div" style="width: 100%; height: 100px;"></div>
    </div>
    <script>
        google.charts.load('current', { packages: ['corechart', 'controls'] });
        google.charts.setOnLoadCallback(getChartData);
        var ticker;
        var interval;
        var dashboard;
        var candlestickChart;
        var candlestickData;
        var ohlcv;
        var candlestickDataTable;
        var volumeChart;
        var volumeData;
        var volumeDataTable;
        var filterSlider;
        var isTickerOrIntervalChanged;

        function getChartData() {

            isTickerOrIntervalChanged = true;
            ticker = document.getElementById('ticker').value;
            interval = document.getElementById('interval').value;
            document.getElementById('page_title').innerText = ticker;

            // Call your controller method to get chart data for the selected ticker
            fetch(`/Stock/GetChartData?ticker=${ticker}&interval=${interval}`)
                .then(response => response.json())
                .then(data => {
                    renderChart(data);
                })
                .catch(error => console.error('Error fetching data:', error));
        }

        function renderChart(data) {         
            ohlcv = data.ohlcv;
            redrawDashboard(ohlcv);
        }

        $(document).ready(function () {
            // Fetch all indicators available for dropdown selection
            $.getJSON('/Stock/GetAllIndicatorTypes', function (indicatorTypes) {
                indicatorTypes.forEach(indicator => {
                    $('#indicatorType').append($('<option>', {
                        value: indicator,
                        text: indicator
                    }));
                });
            });

            $('#openIndicatorPopup').click(function () {
                $('#indicatorPopup').modal('show');
            });

            $('#indicatorType').change(function () {
                var selectedIndicator = $(this).val();
                var parameterFields = $('#parameterFields');
                parameterFields.empty();

                // Fetch parameter fields for the selected indicator
                $.getJSON(`/Stock/GetIndicatorFieldParams?indicatorType=${selectedIndicator}`, function (fields) {
                    fields.forEach(field => {
                        parameterFields.append(field);
                    });
                });

            });

            $('#applySettings').click(function () {
                var params = buildParams(
                    $('#indicatorType').val(),
                    $('#unit').val(),
                    $('#deviation').val(),
                    $('#atrMultiplier').val(),
                );
                candlestickData = applyIndicator(candlestickData, params.indicator, params);
                redrawDashboard(ohlcv);
                $('#indicatorPopup').modal('hide');
            });

            $('#closePopup').click(function () {
                $('#indicatorPopup').modal('hide');
            });
        });

        function redrawDashboard(ohlcv) {

            clearDashboard();

            candlestickData = (candlestickData && !isTickerOrIntervalChanged) ? candlestickData : getCandlestickData(ohlcv);
            candlestickDataTable = getDataToDataTable(candlestickData);
            candlestickChart = createCandlestickChart("candlestick_chart_div", candlestickData);

            volumeData = (volumeData && !isTickerOrIntervalChanged) ? volumeData : getVolumeData(ohlcv);
            volumeDataTable = getDataToDataTable(volumeData);
            volumeChart = createVolumeChart('volume_chart_div');

            var startDate = candlestickData[candlestickData.length - 51][0];
            var endDate = candlestickData[candlestickData.length - 1][0];
            filterSlider = createFilterSlider('filter_slider_div', startDate, endDate, 0);
            setFilterSliderState(filterSlider, startDate, endDate);

            addFilterSliderEventListener(filterSlider, candlestickChart, candlestickData);
            setChartYRange(candlestickData, candlestickChart, startDate, endDate);
            setChartTitle(candlestickChart, formatChartDate(startDate) + ' - ' + formatChartDate(endDate));

            dashboard = createDashboard('dashboard_div');
            dashboard.bind(filterSlider, [candlestickChart, volumeChart]);
            dashboard.draw(candlestickDataTable);
            isTickerOrIntervalChanged = false;
        }

        function buildParams(indicator, unit, deviation, atrMultiplier) {
            return {
                indicator: indicator || null,
                unit: unit || null,
                deviation: deviation || null,
                atrMultiplier: atrMultiplier || null
            }
        }

        function clearDashboard() {
            dashboard = null;
            candlestickChart = null;
            candlestickDataTable = null;
            volumeChart = null;
            volumeData = null;
            volumeDataTable = null;
            filterSlider = null;
        }
    </script>
</body>
</html>