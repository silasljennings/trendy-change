@model StockViewModel
@using System
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
    <title>Stock Chart</title>
</head>
<body>

    <div class="button-bar">
        <button type="button" class="btn btn-primary btn-sm" id="mostActive">Most Active</button>
        <button type="button" class="btn btn-primary btn-sm" id="mostWatched">Most Watched</button>
        <button type="button" class="btn btn-primary btn-sm" id="dayGainers">Day Gainers</button>
        <button type="button" class="btn btn-primary btn-sm" id="dayLosers">Day Losers</button>
        <button type="button" class="btn btn-primary btn-sm" id="undervaluedGrowth">Undervalued Growth</button>
        <button type="button" class="btn btn-primary btn-sm" id="growthTechnology">Technology Growth</button>
        <button type="button" class="btn btn-primary btn-sm" id="smallCapGainers">Small Cap Gainers</button>
        <button type="button" class="btn btn-primary btn-sm" id="aggressiveSmallCap">Aggressive Small Cap</button>

    </div>

    <h1 id="page_title">Stock Chart</h1>

    <div>
        <span>
            <div>
                <label for="ticker">Select Stock Ticker:</label>
                <select id="ticker" name="ticker" onchange="getChartData()">
                    @foreach (var ticker in Model.Tickers)
                    {
                        <option value="@ticker">@ticker</option>
                    }
                </select>
            </div>
            <div>
                <label for="interval">Select Time Interval:</label>
                <select id="interval" name="interval" onchange="getChartData()">
                    @foreach (var interval in Model.Intervals)
                    {
                        <option value="@interval">@interval</option>
                    }
                </select>
            </div>
            <div>
                <button type="button" class="btn btn-primary" id="openIndicatorPopup">Apply Indicator</button>
            </div>

            <div id="indicatorPopup" class="modal fade" tabindex="-1" role="dialog">
                @await Html.PartialAsync("IndicatorPopup")
            </div>
        </span>
    </div>
    <div style="display: flex;">
            <div id="dashboard_div" style="width: 90%; height: 800px;">
                <div id="candlestick_chart_div" style="width: 100%; height: 600px;"></div>
                <div id="volume_chart_div" style="width: 100%; height: 100px;"></div>
                <div id="filter_slider_div" style="width: 100%; height: 100px;"></div>
            </div>
            <div id="sessionIndicatorsList" style="width: 10%; margin-left: 5px;">
                <h4>Session Indicators</h4>
                <p id="indicatorStatus">No indicators have been added</p>
                <!-- Checkboxes for session indicators will be dynamically added here -->
            </div>
    </div>
    <script>// TODO: Vertical and horizontal line charting, showing/hiding indicators, removing indicators, loading animation, apply oscilator type charts to dashboard
        google.charts.load('current', { packages: ['corechart', 'controls'] });
        google.charts.setOnLoadCallback(getChartData);
        var ticker, interval, ohlcv, dashboard, candlestickChart, candlestickData, candlestickDataTable, aggregateDataTable,
        volumeChart, volumeData, volumeDataTable, filterSlider, isTickerOrIntervalChanged,sessionIndicators = [];

        function getChartData() {

            isTickerOrIntervalChanged = true;
            ticker = document.getElementById('ticker').value;
            interval = document.getElementById('interval').value;
            document.getElementById('page_title').innerText = ticker;

            // Call your controller method to get chart data for the selected ticker
            fetch(`/Stock/GetChartData?ticker=${ticker}&interval=${interval}`)
                .then(response => response.json())
                .then(data => {
                    renderChart(data);
                })
                .catch(error => console.error('Error fetching data:', error));
        }

        function renderChart(data) {
            ohlcv = data.ohlcv;
            redrawDashboard(ohlcv);
        }

        $(document).ready(function () {

            fetchTickerList("most_actives");

            // Fetch all indicators available for dropdown selection
            $.getJSON('/Stock/GetAllIndicatorTypes', function (indicatorTypes) {
                indicatorTypes.forEach(indicator => {
                    $('#indicatorType').append($('<option>', {
                        value: indicator,
                        text: indicator
                    }));
                });
            });

            $('#openIndicatorPopup').click(function () {
                $('#indicatorPopup').modal('show');
            });

            $('#indicatorType').change(function () {
                var selectedIndicator = $(this).val();
                var parameterFields = $('#parameterFields');
                parameterFields.empty();

                // Fetch parameter fields for the selected indicator
                $.getJSON(`/Stock/GetIndicatorFieldParams?indicatorType=${selectedIndicator}`, function (fields) {
                    fields.forEach(field => {
                        parameterFields.append(field);
                    });
                });

            });

            $('#applySettings').click(function () {
                var params = buildParams($('#indicatorType').val(), $('#unit').val(), $('#deviation').val(), $('#atrMultiplier').val());
                var indicatorColumnDefinitions = getIndicatorColumnDefinition(params);
                if (!checkColumnNameExists(aggregateDataTable, indicatorColumnDefinitions)) {

                    var closeData = candlestickData.map(p => p[3]);
                    indicatorColumnDefinitions.forEach(definition => {
                        var indicatorData = getIndicatorData(candlestickData, closeData, definition);
                        candlestickDataTable = addDataColumn(candlestickDataTable, aggregateDataTable, definition, indicatorData);
                        appendSessionIndicator(definition);
                    });

                    var seriesOptions = setSeriesOptionsToChart(candlestickDataTable);
                    candlestickChart.setOption('series', seriesOptions);
                    dashboard.draw(candlestickDataTable);
                }
                $('#indicatorPopup').modal('hide');
            });

            $('#closePopup').click(function () {
                $('#indicatorPopup').modal('hide');
            });

            $('#mostWatched').click(function () {
                fetchTickerList('Most Watched');
            });

            $('#dayGainers').click(function () {
                fetchTickerList('day_gainers');
            });

            $('#dayLosers').click(function () {
                fetchTickerList('day_losers');
            });

            $('#undervaluedGrowth').click(function () {
                fetchTickerList('undervalued_growth_stocks');
            });

            $('#aggressiveSmallCap').click(function () {
                fetchTickerList('aggressive_small_caps');
            });

            $('#mostActive').click(function () {
                fetchTickerList('most_actives');
            });

            $('#growthTechnology').click(function () {
                fetchTickerList('growth_technology_stocks');
            });

            $('#smallCapGainers').click(function () {
                fetchTickerList('small_cap_gainers');
            });
        });

        function fetchTickerList(collection) {

            clearDashboard();

            fetch(`/Stock/GetTickerList?collection=${collection}`)
                .then(response => response.json())
                .then(symbols => {
                    updateTickerDropdown(symbols);
                    getChartData();
                })
                .catch(error => console.error('Error fetching ticker list:', error));
        }

        function updateTickerDropdown(tickers) {
            var tickerDropdown = $('#ticker');
            tickerDropdown.empty();
            tickers.forEach(ticker => {
                tickerDropdown.append($('<option>', {
                    value: ticker,
                    text: ticker
                }));
            });
        }

        function redrawDashboard(ohlcv) {
            // TODO: make this function just an initializer for the dashboard. all other updates will come with interfacung with datatable data
            clearDashboard();

            candlestickData = (candlestickData && !isTickerOrIntervalChanged) ? candlestickData : getCandlestickData(ohlcv);
            candlestickDataTable = getDataToDataTable(candlestickData);
            aggregateDataTable = getDataToDataTable(candlestickData);
            candlestickChart = createCandlestickChart("candlestick_chart_div");
            var seriesOptions = setSeriesOptionsToChart(candlestickDataTable);
            candlestickChart.setOption('series', seriesOptions);

            volumeData = (volumeData && !isTickerOrIntervalChanged) ? volumeData : getVolumeData(ohlcv);
            volumeDataTable = getDataToDataTable(volumeData);
            volumeChart = createVolumeChart('volume_chart_div');

            var startDate = candlestickData[candlestickData.length - 51][0];
            var endDate = candlestickData[candlestickData.length - 1][0];
            filterSlider = createFilterSlider('filter_slider_div', startDate, endDate, 0);
            setFilterSliderState(filterSlider, startDate, endDate);

            addFilterSliderEventListener(filterSlider, candlestickChart, candlestickData);
            setChartYRange(candlestickData, candlestickChart, startDate, endDate);
            setChartTitle(candlestickChart, formatChartDate(startDate) + ' - ' + formatChartDate(endDate));

            dashboard = createDashboard('dashboard_div');
            dashboard.bind(filterSlider, [candlestickChart, volumeChart]);
            dashboard.draw(candlestickDataTable);
            isTickerOrIntervalChanged = false;
        }

        function appendSessionIndicator(indicatorDefinition) {
            var indicatorStatus = document.getElementById('indicatorStatus').textContent = '';
            sessionIndicators.push(indicatorDefinition);
            var sessionIndicatorsList = $('#sessionIndicatorsList');
            var checkbox = $('<input>', {
                type: 'checkbox',
                id: indicatorDefinition,
                value: indicatorDefinition,
                checked: true,
            });

            var label = $('<label>', {
                for: indicatorDefinition,
                text: indicatorDefinition,
            });

            sessionIndicatorsList.append(checkbox, label, '<br>');
            checkbox.change(function () {
                var columnName = this.id;
                if (!this.checked) {
                    candlestickDataTable = removeDataColumn(candlestickDataTable, columnName);
                } else {
                    candlestickDataTable = reAddDataColumn(candlestickDataTable, aggregateDataTable, columnName);
                }

                var seriesOptions = setSeriesOptionsToChart(candlestickDataTable);
                candlestickChart.setOption('series', seriesOptions);
                dashboard.draw(candlestickDataTable);
            });
        }

        function buildParams(indicator, unit, deviation, atrMultiplier) {
            return {
                indicator: indicator || null,
                unit: unit || null,
                deviation: deviation || null,
                atrMultiplier: atrMultiplier || null
            }
        }

        function clearDashboard() {
            dashboard = null;
            candlestickChart = null;
            candlestickDataTable = null;
            aggregateDataTable = null;
            volumeChart = null;
            volumeData = null;
            volumeDataTable = null;
            filterSlider = null;
        }</script>
</body>
</html>