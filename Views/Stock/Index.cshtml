@model StockViewModel
@using System
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
    <title>Stock Chart</title>
</head>
<body>

    <div class="button-bar" style="margin-bottom: 20px;">
        <button type="button" class="btn btn-primary btn-sm" id="mostActive">Most Active</button>
        <button type="button" class="btn btn-primary btn-sm" id="mostWatched">Most Watched</button>
        <button type="button" class="btn btn-primary btn-sm" id="dayGainers">Day Gainers</button>
        <button type="button" class="btn btn-primary btn-sm" id="dayLosers">Day Losers</button>
        <button type="button" class="btn btn-primary btn-sm" id="undervaluedGrowth">Undervalued Growth</button>
        <button type="button" class="btn btn-primary btn-sm" id="growthTechnology">Technology Growth</button>
        <button type="button" class="btn btn-primary btn-sm" id="smallCapGainers">Small Cap Gainers</button>
        <button type="button" class="btn btn-primary btn-sm" id="aggressiveSmallCap">Aggressive Small Cap</button>
    </div>

    <div style="display: flex; flex-direction: row; margin-bottom: 10px;">
        <div style="margin: 10px;">
            <label for="ticker">Select Stock Ticker:</label>
            <select id="ticker" name="ticker" onchange="getChartData()">
                @foreach (var ticker in Model.Tickers)
                {
                    <option value="@ticker">@ticker</option>
                }
            </select>
        </div>
        <div style="margin: 10px;">
            <label for="interval">Select Time Interval:</label>
            <select id="interval" name="interval" onchange="getChartData()">
                @foreach (var interval in Model.Intervals)
                {
                    <option value="@interval">@interval</option>
                }
            </select>
        </div>
    </div>

    <div>
        <div style="margin: 10px;">
            <h1 id="page_title">Stock Chart</h1>
        </div>

        <div style="display: flex; flex-direction: row;">
            <label>
                <input type="checkbox" id="candlesticks" name="candlesticks" value="candlesticks" checked>
                Candlesticks
            </label>
            <label>
                <input type="checkbox" id="strikePrices" name="strikePrices" value="strikePrices">
                Strike Prices
            </label>
            <label>
                <input type="checkbox" id="expirations" name="expirations" value="expirations">
                Expirations
            </label>
        </div>

        <div>
            <button type="button" class="btn btn-primary btn-sm" id="openIndicatorPopup">Apply Indicator</button>
        </div>
    </div>

    <div id="indicatorPopup" class="modal fade" tabindex="-1" role="dialog">
        @await Html.PartialAsync("IndicatorPopup")
    </div>

    <div style="display: flex;">
        <div id="dashboard_div" style="width: 85%; height: 700px;">
            <div id="candlestick_chart_div" style="width: 100%; height: 550px;"></div>
            <div id="volume_chart_div" style="width: 100%; height: 100px;"></div>
            <div id="filter_slider_div" style="width: 100%; height: 50px;"></div>
        </div>
        <div id="sessionIndicatorsList" style="width: 15%; margin-left: 10px;">
            <h4>Session Indicators</h4>
            <p id="indicatorStatus">No indicators have been added</p>
            <!-- Checkboxes for session indicators will be dynamically added here -->
        </div>
    </div>
    <script>// TODO: Vertical and horizontal line charting, loading animation, apply oscilator type charts to dashboard, default to a 10 (default), 15, 30, 60, 90 extra time to see chart better 
        google.charts.load('current', { packages: ['corechart', 'controls'] });
        google.charts.setOnLoadCallback(getChartData);
        var ticker, interval, ohlcv, dashboard, candlestickChart, candlestickData, candlestickDataTable, aggregateDataTable,
            volumeChart, volumeData, volumeDataTable, filterSlider, optionsData, sessionIndicators = [];

        async function getChartData() {
            clearDashboard();
            ticker = document.getElementById('ticker').value;
            interval = document.getElementById('interval').value;
            document.getElementById('page_title').innerText = ticker;
            var data = await fetchData(`/Stock/GetChartData?ticker=${ticker}&interval=${interval}`);
            ohlcv = data.ohlcv;
            resetDashboard(ohlcv);
        }

        $(document).ready(function () {

            updateTickerList("most_actives");

            fetchInidcatorList('/Stock/GetAllIndicatorTypes');

            $('#openIndicatorPopup').click(function () {
                $('#indicatorPopup').modal('show');
            });

            $('#indicatorType').change(function () {               
                var parameterFields = fetchIndicatorParams(`/Stock/GetIndicatorFieldParams?indicatorType=${$(this).val()}`);
            });

            $('#applySettings').click(function () {
                var indicatorColumnDefinitions = getIndicatorColumnDefinition();
                if (!checkColumnNameExists(aggregateDataTable, indicatorColumnDefinitions)) {

                    var closeData = candlestickData.map(p => p[3]);
                    indicatorColumnDefinitions.forEach(definition => {
                        var indicatorData = getIndicatorData(candlestickData, closeData, definition);
                        candlestickDataTable = addDataColumn(candlestickDataTable, aggregateDataTable, definition, indicatorData);
                        appendSessionIndicator(definition);
                    });

                    candlestickChart.setOption('series', getSeriesOptionsForChart(candlestickDataTable));
                    dashboard.draw(candlestickDataTable);
                }
                $('#indicatorPopup').modal('hide');
            });

            $('#closePopup').click(function () {
                $('#indicatorPopup').modal('hide');
            });

            $('#mostWatched').click(function () {
                updateTickerList('Most Watched');
            });

            $('#dayGainers').click(function () {
                updateTickerList('day_gainers');
            });

            $('#dayLosers').click(function () {
                updateTickerList('day_losers');
            });

            $('#undervaluedGrowth').click(function () {
                updateTickerList('undervalued_growth_stocks');
            });

            $('#aggressiveSmallCap').click(function () {
                updateTickerList('aggressive_small_caps');
            });

            $('#mostActive').click(function () {
                updateTickerList('most_actives');
            });

            $('#growthTechnology').click(function () {
                updateTickerList('growth_technology_stocks');
            });

            $('#smallCapGainers').click(function () {
                updateTickerList('small_cap_gainers');
            });
        });

        async function updateTickerList(collection) {

            var tickers = await fetchData(`/Stock/GetTickerList?collection=${collection}`);
            var tickerDropdown = $('#ticker');
            tickerDropdown.empty();
            tickers.forEach(ticker => {
                tickerDropdown.append($('<option>', {
                    value: ticker,
                    text: ticker
                }));
            });

            getChartData();
        }

        function resetDashboard() {
       
            candlestickData = getCandlestickData(ohlcv);
            var startDate = candlestickData[candlestickData.length - 51][0];
            var endDate = candlestickData[candlestickData.length - 1][0];

            candlestickDataTable = getDataToDataTable(candlestickData);
            aggregateDataTable = getDataToDataTable(candlestickData);
            candlestickChart = createCandlestickChart("candlestick_chart_div");
            candlestickChart.setOption('series', getSeriesOptionsForChart(candlestickDataTable));

            volumeData = getVolumeData(ohlcv);
            volumeDataTable = getDataToDataTable(volumeData);
            volumeChart = createVolumeChart('volume_chart_div');

            filterSlider = createFilterSlider('filter_slider_div', startDate, endDate, 0);
            setFilterSliderState(filterSlider, startDate, endDate);

            addFilterSliderEventListener(filterSlider, candlestickChart, candlestickData);
            setChartYRange(candlestickData, candlestickChart, startDate, endDate);
            setChartXRange(true, candlestickChart)
            setChartTitle(candlestickChart, formatChartDate(startDate) + ' - ' + formatChartDate(endDate));

            dashboard = createDashboard('dashboard_div');
            dashboard.bind(filterSlider, [candlestickChart, volumeChart]);
            dashboard.draw(candlestickDataTable);
        }

        function appendSessionIndicator(indicatorDefinition) {
            var indicatorStatus = document.getElementById('indicatorStatus').textContent = '';
            sessionIndicators.push(indicatorDefinition);
            var sessionIndicatorsList = $('#sessionIndicatorsList');
            var checkbox = $('<input>', {
                type: 'checkbox',
                id: indicatorDefinition,
                value: indicatorDefinition,
                checked: true,
            });

            var label = $('<label>', {
                for: indicatorDefinition,
                text: indicatorDefinition,
            });

            sessionIndicatorsList.append(checkbox, label, '<br>');
            checkbox.change(function () {
                var columnName = this.id;
                if (!this.checked) {
                    candlestickDataTable = removeDataColumn(candlestickDataTable, columnName);
                } else {
                    candlestickDataTable = reAddDataColumn(candlestickDataTable, aggregateDataTable, columnName);
                }

                candlestickChart.setOption('series', getSeriesOptionsForChart(candlestickDataTable));
                dashboard.draw(candlestickDataTable);
            });
        }

        function clearDashboard() {
            dashboard = candlestickChart = candlestickDataTable = aggregateDataTable = volumeChart = volumeData = volumeDataTable = filterSlider = null;
        }
    </script>
</body>
</html>